{"version":3,"sources":["utils/ebbinghaus.ts","providers/ProblemProvider.tsx","utils/localStorage.ts","components/Tables/ProblemsTable.tsx","providers/DialogStateProvider.tsx","components/QuickAccessButton.tsx","components/Dialogs/AddProblemDialog.tsx","components/Tables/SelectedProblemsTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getWeight","tc","t0","practice","remember","dt","Math","exp","updateWeightsNormCumulated","problems","forEach","p","Date","getTime","weight","updateTime","updateWeights","weightSum","normCumulatedWeight","updateNormCumulated","selectProblems","count","selectedProblems","r","random","problem","getProblem","undefined","find","index","push","length","min","binarySearch","left","right","mid","floor","platform","difficulty","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","initialState","reducer","state","action","type","payload","element","indexOf","problemsCopy","splice","e","ProblemsContext","createContext","ProblemsProvider","children","useReducer","dispatch","Provider","value","ProblemsTable","props","useContext","handleUpdate","button","TableContainer","component","Paper","Table","TableBody","map","TableRow","key","TableCell","serial","name","toFixed","ButtonGroup","IconButton","aria-label","onClick","Tooltip","title","color","style","addProblemDialogOpen","DialogStateContext","DialogStateProvider","useStyles","makeStyles","theme","createStyles","speedDial","position","bottom","spacing","top","QuickAccessButton","classes","useState","open","setOpen","dispatchProblem","handleClose","SpeedDial","ariaLabel","className","icon","SpeedDialIcon","onClose","onOpen","SpeedDialAction","tooltipTitle","selected","handleRefreshProblem","AddProblemDialog","problemDispatch","useTheme","fullScreen","useMediaQuery","breakpoints","down","setPlatform","setSerial","setName","setDifficulty","time","setTime","handleChange","setter","event","target","Dialog","aria-labelledby","DialogTitle","id","DialogContent","Grid","container","justify","alignItems","item","xs","sm","TextField","fullWidth","required","variant","label","onChange","select","MenuItem","utils","DateFnsUtils","DateTimePicker","autoOk","clearable","inputVariant","ampm","allowKeyboardControl","margin","strictCompareDates","date","onError","format","InputProps","endAdornment","InputAdornment","InsertInvitation","DialogActions","Button","autoFocus","currentTime","createTime","replace","toLowerCase","handleAdd","SelectedProblemsTable","App","useEffect","stringify","setItem","error","saveState","direction","Typography","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af3451f6.chunk.js","sourcesContent":["import {Problem} from \"../providers/ProblemProvider\";\n\nexport const getWeight = (tc: number, t0: number, practice: number, remember: number): number => {\n  const dt = (tc - t0) / 43200000;\n  return 1 - Math.exp(- dt / (practice + remember));\n};\n\nexport const updateWeights = (problems: Problem[]) => {\n  problems.forEach(p => {\n    const tc = new Date().getTime();\n    p.weight = getWeight(tc, p.updateTime, p.practice, p.remember)\n  })\n};\n\nexport const updateNormCumulated = (problems: Problem[]) => {\n  let weightSum = 0;\n  for (let p of problems) {\n    p.normCumulatedWeight = weightSum;\n    weightSum += p.weight;\n  }\n  for (let p of problems) {\n    p.normCumulatedWeight /= weightSum;\n  }\n};\n\nexport const updateWeightsNormCumulated = (problems: Problem[]) => {\n  updateWeights(problems);\n  updateNormCumulated(problems);\n};\n\nexport const selectProblems = (problems: Problem[], count: number): Problem[] => {\n  const selectedProblems: Problem[] = [];\n  while (selectedProblems.length < Math.min(count, problems.length)) {\n    const r = Math.random();\n    const problem = getProblem(problems, r);\n    if (selectedProblems.find(p => p.index === problem.index) === undefined) {\n      selectedProblems.push(problem);\n    }\n  }\n  return selectedProblems;\n}\n\nconst getProblem = (problems: Problem[], r: number): Problem => {\n  // const index = linearSearch(problems, r);\n  const index = binarySearch(problems, 0, problems.length - 1, r);\n  return problems[index];\n};\n\n// const linearSearch = (problems: Problem[], r: number): number => {\n//   for (let i = problems.length - 1; i >= 0; i--) {\n//     if (problems[i].normCumulatedWeight <= r) {\n//       return i;\n//     }\n//   }\n//   return 0;\n// }\n\nconst binarySearch = (problems: Problem[], left: number, right: number, r: number): number => {\n  while(left < right) {\n    const mid = Math.floor(left + (right - left) / 2) + 1;\n    if (problems[mid].normCumulatedWeight <= r) {\n      left = mid;\n    } else if (problems[mid].normCumulatedWeight > r) {\n      right = mid - 1;\n    }\n  }\n  return right;\n};\n","import React, {createContext, Dispatch, ReactElement, ReactNode, useReducer} from 'react';\nimport {loadState} from \"../utils/localStorage\";\nimport {selectProblems, updateWeightsNormCumulated} from \"../utils/ebbinghaus\";\n\ntype Platform = 'leetcode' | 'codility';\ntype DifficultyLeetCode = 'easy' | 'medium' | 'hard';\ntype DifficultyCodility = 'painless' | 'respectable'\ntype Difficulty = DifficultyLeetCode | DifficultyCodility;\n\nexport interface Problem {\n  platform: number;\n  serial: string;\n  index: string;\n  name: string;\n  createTime: number;\n  updateTime: number;\n  practice: number;\n  remember: number;\n  weight: number;\n  difficulty: number;\n  normCumulatedWeight: number;\n}\n\ntype ActionType = { type: 'addProblem', payload: Problem }\n  | { type: 'addProblems', payload: Problem[] }\n  | { type: 'addSelectedProblems', payload: Problem[] }\n  | { type: 'deleteProblem', payload: string }\n  | { type: 'updateProblem', payload: Problem }\n  | { type: 'deleteSelectedProblem', payload: string }\n  | { type: 'updateWeightsNormCumulated' };\n\ninterface StateType {\n  selectedProblems: Array<Problem>;\n  problems: Array<Problem>;\n  dispatch?: Dispatch<ActionType>;\n}\n\nexport const platform = [\"LeetCode\", \"Codility\"];\nexport const difficulty = [\"Easy\", \"Medium\", \"Hard\", \"Painless\", \"Respectable\"];\n\nconst problems = loadState();\nupdateWeightsNormCumulated(problems);\nconst selectedProblems = selectProblems(problems, 3);\n\nconst initialState: StateType = {\n  selectedProblems: selectedProblems,\n  problems: problems,\n}\n\nconst reducer = (state: StateType, action: ActionType): StateType => {\n  switch (action.type) {\n    case \"addProblem\":\n      if (action.payload && state.problems.find(element => element.index === action.payload.index)) {\n        return state;\n      }\n      return {\n        ...state,\n        problems: [...state.problems, action.payload]\n      }\n    case \"addProblems\":\n      if (action.payload) {\n        return {\n          ...state,\n          problems: action.payload\n        }\n      }\n      return state;\n    case \"addSelectedProblems\":\n      if (action.payload) {\n        return {\n          ...state,\n          selectedProblems: action.payload\n        }\n      }\n      return state;\n    case \"deleteProblem\":\n      if (action.payload) {\n        const p = state.problems.find(element => element.index === action.payload);\n        if (p !== undefined) {\n          const index = state.problems.indexOf(p);\n          const problemsCopy = [...state.problems];\n          problemsCopy.splice(index, 1);\n          return {\n            ...state,\n            problems: problemsCopy\n          }\n        }\n      }\n      return state;\n    case \"deleteSelectedProblem\":\n      if (action.payload) {\n        const p = state.selectedProblems.find(e => e.index === action.payload);\n        if (p !== undefined) {\n          const index = state.selectedProblems.indexOf(p);\n          const problemsCopy = [...state.selectedProblems];\n          problemsCopy.splice(index, 1);\n          return {\n            ...state,\n            selectedProblems: problemsCopy\n          }\n        }\n      }\n      return state;\n    case \"updateProblem\":\n      if (action.payload) {\n        const p = state.problems.find(element => element.index === action.payload.index);\n        if (p !== undefined) {\n          const index = state.problems.indexOf(p);\n          const problemsCopy = [...state.problems];\n          problemsCopy.splice(index, 1, action.payload);\n          return {\n            ...state,\n            problems: problemsCopy\n          }\n        }\n      }\n      return state;\n    case \"updateWeightsNormCumulated\":\n      const problemsCopy = [...state.problems];\n      updateWeightsNormCumulated(problemsCopy);\n      return {\n        ...state,\n        problems: problemsCopy\n      }\n    default:\n      return state;\n  }\n};\n\nexport const ProblemsContext = createContext(initialState)\n\nexport const ProblemsProvider = ({children}: { children: ReactNode }): ReactElement => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <ProblemsContext.Provider value={{...state, dispatch}}>\n      {children}\n    </ProblemsContext.Provider>\n  )\n}","import {Problem} from \"../providers/ProblemProvider\";\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return [];\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nexport const saveState = (state: Problem[]) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (err) {\n    console.error(err);\n  }\n};","import React, {ReactElement, useContext} from 'react';\nimport {difficulty, platform, Problem, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {\n  ButtonGroup,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Tooltip\n} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckIcon from '@material-ui/icons/Check';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\n\ninterface ProblemsTableProps {\n  problems: Problem[];\n}\n\nconst ProblemsTable = (props: ProblemsTableProps): ReactElement => {\n\n  const {dispatch} = useContext(ProblemsContext);\n\n  const handleDelete = (index: string) => {\n    if (dispatch) {\n      dispatch({\n        type: \"deleteProblem\",\n        payload: index,\n      });\n      dispatch({\n        type: \"deleteSelectedProblem\",\n        payload: index,\n      })\n    }\n  };\n\n  const handleUpdate = (p: Problem, button: \"remembered\" | \"fail-to-remember\" | \"reset\") => {\n    p.updateTime = new Date().getTime();\n    p.weight = 0;\n    switch (button) {\n      case \"remembered\":\n        p.practice++;\n        p.remember++;\n        break;\n      case \"fail-to-remember\":\n        p.practice++;\n        break;\n      case \"reset\":\n        p.practice = 1;\n        p.remember = 1;\n        break;\n    }\n    if (dispatch) {\n      dispatch({\n        type: \"updateProblem\",\n        payload: p,\n      });\n    }\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        {/*<TableHead>*/}\n        {/*  <TableRow>*/}\n        {/*    <TableCell>Platform</TableCell>*/}\n        {/*    <TableCell>Problem</TableCell>*/}\n        {/*    <TableCell># Practice</TableCell>*/}\n        {/*    <TableCell># Remembered</TableCell>*/}\n        {/*    <TableCell>Difficulty</TableCell>*/}\n        {/*  </TableRow>*/}\n        {/*</TableHead>*/}\n        <TableBody>\n          {props.problems.map(p => (\n            <TableRow key={p.index}>\n              <TableCell>{platform[p.platform]}</TableCell>\n              <TableCell>{p.serial}</TableCell>\n              <TableCell>{p.name}</TableCell>\n              <TableCell>{difficulty[p.difficulty]}</TableCell>\n              <TableCell>{(1 - p.weight).toFixed(2)}</TableCell>\n              {/*<TableCell><LinearProgress variant=\"determinate\" value={10} /></TableCell>*/}\n              <TableCell>{p.practice}</TableCell>\n              <TableCell>{p.remember}</TableCell>\n              <TableCell>\n                <ButtonGroup>\n                  <IconButton\n                    aria-label={\"delete\"}\n                    onClick={() => handleDelete(p.index)}\n                  >\n                    <Tooltip title={\"delete\"}>\n                      <CloseIcon color={\"secondary\"}/>\n                    </Tooltip>\n                  </IconButton>\n                  <IconButton\n                    aria-label={\"remembered\"}\n                    onClick={() => handleUpdate(p, \"remembered\")}\n                  >\n                    <Tooltip title={\"remembered\"}>\n                      <CheckIcon style={{color: \"green\"}}/>\n                    </Tooltip>\n                  </IconButton>\n                  <IconButton\n                    aria-label={\"fail-to-remember\"}\n                    onClick={() => handleUpdate(p, \"fail-to-remember\")}\n                  >\n                    <Tooltip title={\"forget\"}>\n                      <RadioButtonUncheckedIcon style={{color: \"orange\"}}/>\n                    </Tooltip>\n                  </IconButton>\n                  <IconButton\n                    aria-label={\"reset\"}\n                    onClick={() => handleUpdate(p, \"reset\")}\n                  >\n                    <Tooltip title={\"reset\"}>\n                      <RotateLeftIcon style={{color: \"blue\"}}/>\n                    </Tooltip>\n                  </IconButton>\n                </ButtonGroup>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default ProblemsTable;\n","import React, {createContext, Dispatch, ReactElement, ReactNode, useReducer} from 'react';\n\ntype ActionType = { type: 'toggleAddProblem', payload: boolean }\n\ninterface StateType {\n  addProblemDialogOpen: boolean;\n  dispatch?: Dispatch<ActionType>;\n}\n\nconst initialState: StateType = {\n  addProblemDialogOpen: false\n};\n\nconst reducer = (state: StateType, action: ActionType): StateType => {\n  switch (action.type) {\n    case \"toggleAddProblem\":\n      return {\n        ...state,\n        addProblemDialogOpen: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport const DialogStateContext = createContext(initialState);\n\nexport const DialogStateProvider = ({children}: { children: ReactNode }): ReactElement => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <DialogStateContext.Provider value={{...state, dispatch}}>\n      {children}\n    </DialogStateContext.Provider>\n  )\n}","import React, {useContext, useState} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\nimport SpeedDialIcon from \"@material-ui/lab/SpeedDialIcon\";\nimport SpeedDialAction from \"@material-ui/lab/SpeedDialAction\";\nimport {DialogStateContext} from \"../providers/DialogStateProvider\";\nimport {ProblemsContext} from \"../providers/ProblemProvider\";\nimport {selectProblems} from \"../utils/ebbinghaus\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    speedDial: {\n      position: 'absolute',\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n        bottom: theme.spacing(5),\n        right: theme.spacing(5),\n      },\n      '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n        top: theme.spacing(5),\n        left: theme.spacing(5),\n      },\n    }\n  })\n);\n\nconst QuickAccessButton = () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState<boolean>(false);\n  const {dispatch} = useContext(DialogStateContext);\n  const {problems, dispatch: dispatchProblem} = useContext(ProblemsContext);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleAddProblemDialog = () => {\n    if (dispatch) {\n      dispatch({\n        type: \"toggleAddProblem\",\n        payload: true,\n      });\n    }\n  };\n\n  const handleRefreshProblem = () => {\n    if (dispatchProblem) {\n      dispatchProblem({\n        type: \"updateWeightsNormCumulated\",\n      });\n    }\n    const selected = selectProblems(problems, 3);\n    if (dispatchProblem) {\n      dispatchProblem({\n        type: \"addSelectedProblems\",\n        payload: selected\n      });\n    }\n  };\n\n  return (\n    <div>\n      <SpeedDial\n        ariaLabel=\"SpeedDial example\"\n        className={classes.speedDial}\n        icon={<SpeedDialIcon/>}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={open}\n      >\n        <SpeedDialAction\n          title='Add Problem'\n          icon={<NoteAddIcon/>}\n          tooltipTitle='Add Problem'\n          onClick={() => {\n            handleAddProblemDialog();\n            handleClose();\n          }}\n        />\n        <SpeedDialAction\n          title='Refresh Problem'\n          icon={<AutorenewIcon/>}\n          tooltipTitle='Refresh Problem'\n          onClick={() => {\n            handleRefreshProblem();\n            handleClose();\n          }}\n        />\n      </SpeedDial>\n    </div>\n  )\n}\n\nexport default QuickAccessButton;","import React, {ChangeEvent, Dispatch, SetStateAction, useContext, useState} from 'react';\nimport {DialogStateContext} from \"../../providers/DialogStateProvider\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  IconButton,\n  InputAdornment,\n  MenuItem,\n  TextField,\n  useMediaQuery,\n  useTheme\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport {InsertInvitation} from \"@material-ui/icons\";\nimport {Problem, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {getWeight} from \"../../utils/ebbinghaus\";\n\nconst AddProblemDialog = () => {\n  const {addProblemDialogOpen, dispatch} = useContext(DialogStateContext);\n  const {dispatch: problemDispatch} = useContext(ProblemsContext);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [platform, setPlatform] = useState<number>(0);\n  const [serial, setSerial] = useState<string>(\"\");\n  const [name, setName] = useState<string>(\"\");\n  const [difficulty, setDifficulty] = useState<number>(0);\n  const [time, setTime] = useState<Date | null>(null);\n\n  const handleClose = () => {\n    if (dispatch) {\n      dispatch({\n        type: \"toggleAddProblem\",\n        payload: false,\n      });\n    }\n    setPlatform(0);\n    setSerial(\"\");\n    setName(\"\");\n    setDifficulty(0);\n    setTime(null);\n  };\n\n  const handleChange = <T extends any>(setter: Dispatch<SetStateAction<T>>) => {\n    return (event: ChangeEvent<{ value: unknown }>) => {\n      setter(event.target.value as T);\n    };\n  };\n\n  const handleAdd = () => {\n    const currentTime = new Date().getTime();\n    const createTime = time === null ? currentTime : time.getTime();\n\n    const problem: Problem = {\n      platform: platform,\n      serial: serial,\n      name: name,\n      index: (serial + name).replace(\" \", \"\").toLowerCase(),\n      practice: 1,\n      remember: 1,\n      difficulty: difficulty,\n      createTime: createTime,\n      updateTime: createTime,\n      weight: getWeight(currentTime, createTime, 1, 1),\n      normCumulatedWeight: 0\n    };\n    if (problemDispatch) {\n      problemDispatch({\n        type: \"addProblem\",\n        payload: problem\n      });\n    }\n  }\n\n  return (\n\n    <Dialog\n      // fullWidth\n      fullScreen={fullScreen}\n      open={addProblemDialogOpen}\n      onClose={handleClose}\n      aria-labelledby=\"responsive-dialog-title\"\n    >\n      <DialogTitle id=\"responsive-dialog-title\">{\"Add New Problem\"}</DialogTitle>\n      <DialogContent>\n        <Grid container spacing={2} justify={\"center\"} alignItems={\"center\"}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id={\"platform\"}\n              fullWidth\n              required\n              variant={\"outlined\"}\n              label={\"Platform\"}\n              value={platform}\n              onChange={handleChange(setPlatform)}\n              select\n            >\n              <MenuItem value={0}>LeetCode</MenuItem>\n              <MenuItem value={1}>Codility</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id={\"serial\"}\n              fullWidth\n              required\n              variant={\"outlined\"}\n              label={platform === 0 ? \"Serial Number\" : \"Lesson Number\"}\n              value={serial}\n              onChange={handleChange(setSerial)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id={\"name\"}\n              fullWidth\n              required\n              variant={\"outlined\"}\n              label={\"Problem Name\"}\n              value={name}\n              onChange={handleChange(setName)}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            {\n              platform === 0 &&\n              <TextField\n                id={\"difficulty\"}\n                fullWidth\n                required\n                variant={\"outlined\"}\n                label={\"Difficulty\"}\n                value={difficulty}\n                onChange={handleChange(setDifficulty)}\n                select\n              >\n                <MenuItem value={0}>Easy</MenuItem>\n                <MenuItem value={1}>Medium</MenuItem>\n                <MenuItem value={2}>Hard</MenuItem>\n              </TextField>\n            }\n            {\n              platform === 1 &&\n              <TextField\n                id={\"difficulty\"}\n                fullWidth\n                required\n                variant={\"outlined\"}\n                label={\"Difficulty\"}\n                value={difficulty}\n                onChange={handleChange(setDifficulty)}\n                select\n              >\n                <MenuItem value={4}>Painless</MenuItem>\n                <MenuItem value={5}>Respectable</MenuItem>\n              </TextField>\n            }\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DateTimePicker\n                autoOk\n                clearable\n                fullWidth\n                inputVariant=\"outlined\"\n                color=\"secondary\"\n                ampm={false}\n                allowKeyboardControl={false}\n                margin=\"normal\"\n                id=\"create time\"\n                label=\"Create Time\"\n                value={time}\n                strictCompareDates={true}\n                onChange={(date) => setTime(date)}\n                onError={console.log}\n                format=\"dd.MMM.yyyy HH:mm\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton>\n                        <InsertInvitation/>\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n\n        {/*<DialogContentText>*/}\n        {/*  Let Google help apps determine location. This means sending anonymous location data to*/}\n        {/*  Google, even when no apps are running.*/}\n        {/*</DialogContentText>*/}\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            if (serial && name) {\n              handleAdd();\n              handleClose();\n            }\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n\n  );\n};\n\nexport default AddProblemDialog;","import React, {ReactElement, useContext} from 'react';\nimport {difficulty, platform, Problem, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {ButtonGroup, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableRow} from \"@material-ui/core\";\nimport CheckIcon from '@material-ui/icons/Check';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\ninterface ProblemsTableProps {\n  problems: Problem[];\n}\n\nconst SelectedProblemsTable = (props: ProblemsTableProps): ReactElement => {\n\n  const {dispatch} = useContext(ProblemsContext);\n\n  const handleUpdate = (p: Problem, button: \"remembered\" | \"fail-to-remember\") => {\n    p.updateTime = new Date().getTime();\n    p.weight = 0;\n    switch (button) {\n      case \"remembered\":\n        p.practice++;\n        p.remember++;\n        break;\n      case \"fail-to-remember\":\n        p.practice++;\n        break;\n    }\n    if (dispatch) {\n      dispatch({\n        type: \"updateProblem\",\n        payload: p,\n      });\n      dispatch({\n        type: \"deleteSelectedProblem\",\n        payload: p.index,\n      });\n    }\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        {/*<TableHead>*/}\n        {/*  <TableRow>*/}\n        {/*    <TableCell>Platform</TableCell>*/}\n        {/*    <TableCell>Problem</TableCell>*/}\n        {/*    <TableCell># Practice</TableCell>*/}\n        {/*    <TableCell># Remembered</TableCell>*/}\n        {/*    <TableCell>Difficulty</TableCell>*/}\n        {/*  </TableRow>*/}\n        {/*</TableHead>*/}\n        <TableBody>\n          {props.problems.map(p => (\n            <TableRow key={p.index + 'selected'}>\n              <TableCell>{platform[p.platform]}</TableCell>\n              <TableCell>{p.serial}</TableCell>\n              <TableCell>{p.name}</TableCell>\n              <TableCell>{p.practice}</TableCell>\n              <TableCell>{p.remember}</TableCell>\n              <TableCell>{difficulty[p.difficulty]}</TableCell>\n              <TableCell>\n                <ButtonGroup>\n                  <IconButton\n                    aria-label={\"remembered\"}\n                    onClick={() => handleUpdate(p, \"remembered\")}\n                  >\n                    <CheckIcon style={{ color: \"green\"}}/>\n                  </IconButton>\n                  <IconButton\n                    aria-label={\"fail-to-remember\"}\n                    onClick={() => handleUpdate(p, \"fail-to-remember\")}\n                  >\n                    <RadioButtonUncheckedIcon style={{ color: \"orange\"}}/>\n                  </IconButton>\n                </ButtonGroup>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default SelectedProblemsTable;\n","import React, {useContext, useEffect} from 'react';\nimport './App.css';\nimport {ProblemsContext} from \"./providers/ProblemProvider\";\nimport ProblemsTable from \"./components/Tables/ProblemsTable\";\nimport {Grid, Typography} from \"@material-ui/core\";\nimport QuickAccessButton from \"./components/QuickAccessButton\";\nimport AddProblemDialog from \"./components/Dialogs/AddProblemDialog\";\nimport {saveState} from \"./utils/localStorage\";\nimport SelectedProblemsTable from \"./components/Tables/SelectedProblemsTable\";\n\nfunction App() {\n  const {problems, selectedProblems} = useContext(ProblemsContext);\n\n  useEffect(() => {\n    console.log(\"save to local storage\")\n    saveState(problems);\n  }, [problems])\n  \n  return (\n    <div className=\"App\">\n      {/*<header className=\"App-header\">*/}\n      {/*  <img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n      {/*  <p>*/}\n      {/*    Edit <code>src/App.tsx</code> and save to reload.*/}\n      {/*  </p>*/}\n      {/*  <a*/}\n      {/*    className=\"App-link\"*/}\n      {/*    href=\"https://reactjs.org\"*/}\n      {/*    target=\"_blank\"*/}\n      {/*    rel=\"noopener noreferrer\"*/}\n      {/*  >*/}\n      {/*    Learn React*/}\n      {/*  </a>*/}\n      {/*</header>*/}\n\n      <Grid container spacing={3} direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Grid item xs={11} sm={6}>\n          <Typography variant={\"h5\"} component={\"h2\"}>\n            Selected Problems\n          </Typography>\n        </Grid>\n        <Grid item xs={11} sm={6}>\n          <SelectedProblemsTable problems={selectedProblems}/>\n        </Grid>\n        <Grid item xs={11} sm={6}>\n          <Typography variant={\"h5\"} component={\"h2\"}>\n            Problems\n          </Typography>\n        </Grid>\n        <Grid item xs={11} sm={6}>\n          <ProblemsTable problems={problems}/>\n        </Grid>\n      </Grid>\n      <QuickAccessButton/>\n      <AddProblemDialog/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ProblemsProvider} from \"./providers/ProblemProvider\";\nimport {DialogStateProvider} from \"./providers/DialogStateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ProblemsProvider>\n      <DialogStateProvider>\n        <App />\n      </DialogStateProvider>\n    </ProblemsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}