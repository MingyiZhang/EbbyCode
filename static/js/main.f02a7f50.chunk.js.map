{"version":3,"sources":["utils/ebbinghaus.ts","providers/ProblemProvider.tsx","utils/localStorage.ts","providers/DialogStateProvider.tsx","components/Buttons/QuickAccessButton.tsx","providers/ChoiceProvider.tsx","components/Dialogs/AddProblemDialog.tsx","components/Cards/ProblemCardContent.tsx","components/Cards/ProblemCard.tsx","components/Cards/SelectedProblemCard.tsx","components/Dialogs/SortProblemsDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getWeight","tc","t0","practice","remember","dt","Math","exp","updateWeightsNormCumulated","problems","forEach","p","Date","getTime","weight","updateTime","updateWeights","weightSum","normCumulatedWeight","updateNormCumulated","selectProblems","count","selectedProblems","r","random","problem","getProblem","undefined","find","index","push","length","min","binarySearch","left","right","mid","floor","platform","difficulty","sortEntries","sortEntryLabels","serial","title","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","initialState","sortEntry","isReverse","reducer","state","action","type","payload","element","indexOf","problemsCopy","splice","e","alpha","sortedProblems","sort","p1","p2","less","ProblemsContext","createContext","ProblemsProvider","children","useReducer","dispatch","Provider","value","addProblemDialogOpen","sortProblemsDialogOpen","DialogStateContext","DialogStateProvider","useStyles","makeStyles","theme","createStyles","speedDial","position","bottom","spacing","top","QuickAccessButton","classes","useState","open","setOpen","useContext","dispatchProblem","handleClose","SpeedDial","ariaLabel","className","icon","SpeedDialIcon","onClose","onOpen","SpeedDialAction","tooltipTitle","onClick","selected","handleRefreshSelectedProblems","a","document","createElement","download","href","encodeURIComponent","stringify","target","body","appendChild","click","removeChild","downloadToJson","id","style","display","onChange","event","files","reader","FileReader","onloadend","uploadProblems","result","readAsText","htmlFor","leetCodeChoices","map","titleSlug","ChoicesContext","ChoicesProvider","AddProblemDialog","problemDispatch","useTheme","fullScreen","useMediaQuery","breakpoints","down","setPlatform","setSerial","setTitle","setDifficulty","time","setTime","handleChange","setter","handleOnChange","choice","toString","Dialog","DialogTitle","DialogContent","Grid","container","justify","alignItems","item","xs","sm","TextField","fullWidth","required","variant","label","select","MenuItem","Autocomplete","options","getOptionLabel","option","newValue","inputValue","onInputChange","newInputValue","renderInput","params","disabled","utils","DateFnsUtils","DateTimePicker","autoOk","clearable","inputVariant","color","ampm","allowKeyboardControl","margin","strictCompareDates","date","onError","format","InputProps","endAdornment","InputAdornment","IconButton","InsertInvitation","DialogActions","Button","autoFocus","currentTime","createTime","replace","toLowerCase","handleAdd","bullet","transform","fontSize","pos","marginBottom","content","textAlign","ProblemCardContent","props","bull","CardContent","Typography","gutterBottom","height","component","LinearProgress","card","flexDirection","ProblemCard","handleUpdate","button","Card","CardActions","ButtonGroup","Tooltip","SelectedProblemCard","SortProblemsDialog","entry","setEntry","setIsReverse","FormControl","RadioGroup","FormControlLabel","control","Radio","Switch","checked","heroContent","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","cardMedia","cardContent","flexGrow","App","useEffect","setItem","error","saveState","Container","maxWidth","align","md","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f02a7f50.chunk.js","sourcesContent":["import {ProblemDisplay} from \"../providers/ProblemProvider\";\n\nexport const getWeight = (tc: number, t0: number, practice: number, remember: number): number => {\n  const dt = (tc - t0) / 43200000;\n  return 1 - Math.exp(- dt / (practice + remember));\n};\n\nexport const updateWeights = (problems: ProblemDisplay[]) => {\n  problems.forEach(p => {\n    const tc = new Date().getTime();\n    p.weight = getWeight(tc, p.updateTime, p.practice, p.remember)\n  })\n};\n\nexport const updateNormCumulated = (problems: ProblemDisplay[]) => {\n  let weightSum = 0;\n  for (let p of problems) {\n    p.normCumulatedWeight = weightSum;\n    weightSum += p.weight;\n  }\n  for (let p of problems) {\n    p.normCumulatedWeight /= weightSum;\n  }\n};\n\nexport const updateWeightsNormCumulated = (problems: ProblemDisplay[]) => {\n  updateWeights(problems);\n  updateNormCumulated(problems);\n};\n\nexport const selectProblems = (problems: ProblemDisplay[], count: number): ProblemDisplay[] => {\n  const selectedProblems: ProblemDisplay[] = [];\n  while (selectedProblems.length < Math.min(count, problems.length)) {\n    const r = Math.random();\n    const problem = getProblem(problems, r);\n    if (selectedProblems.find(p => p.index === problem.index) === undefined) {\n      selectedProblems.push(problem);\n    }\n  }\n  return selectedProblems;\n}\n\nconst getProblem = (problems: ProblemDisplay[], r: number): ProblemDisplay => {\n  // const index = linearSearch(problems, r);\n  const index = binarySearch(problems, 0, problems.length - 1, r);\n  return problems[index];\n};\n\n// const linearSearch = (problems: Problem[], r: number): number => {\n//   for (let i = problems.length - 1; i >= 0; i--) {\n//     if (problems[i].normCumulatedWeight <= r) {\n//       return i;\n//     }\n//   }\n//   return 0;\n// }\n\nconst binarySearch = (problems: ProblemDisplay[], left: number, right: number, r: number): number => {\n  while(left < right) {\n    const mid = Math.floor(left + (right - left) / 2) + 1;\n    if (problems[mid].normCumulatedWeight <= r) {\n      left = mid;\n    } else if (problems[mid].normCumulatedWeight > r) {\n      right = mid - 1;\n    }\n  }\n  return right;\n};\n","import React, {createContext, Dispatch, ReactElement, ReactNode, useReducer} from 'react';\nimport {loadState} from \"../utils/localStorage\";\nimport {selectProblems, updateWeightsNormCumulated} from \"../utils/ebbinghaus\";\n\nexport interface ProblemDisplay {\n  platform: number;\n  serial: string;\n  index: string;\n  title: string;\n  createTime: number;\n  updateTime: number;\n  practice: number;\n  remember: number;\n  weight: number;\n  difficulty: number;\n  normCumulatedWeight: number;\n}\n\nexport type sortEntry = \"platform\" | \"serial\" | \"title\" | \"practice\" | \"remember\" | \"weight\" | \"difficulty\";\n\ninterface SortType {\n  sortEntry: sortEntry;\n  isReverse: boolean;\n}\n\ntype ActionType = { type: 'addProblem', payload: ProblemDisplay }\n  | { type: 'addProblems', payload: ProblemDisplay[] }\n  | { type: 'addSelectedProblems', payload: ProblemDisplay[] }\n  | { type: 'deleteProblem', payload: string }\n  | { type: 'updateProblem', payload: ProblemDisplay }\n  | { type: 'deleteSelectedProblem', payload: string }\n  | { type: 'updateWeightsNormCumulated' }\n  | { type: 'sortProblems', payload: SortType };\n\ninterface StateType {\n  selectedProblems: Array<ProblemDisplay>;\n  problems: Array<ProblemDisplay>;\n  sortEntry: sortEntry;\n  isReverse: boolean;\n  dispatch?: Dispatch<ActionType>;\n}\n\nexport const platform = [\"LeetCode\", \"Codility\"];\nexport const difficulty = [\"Easy\", \"Medium\", \"Hard\", \"Painless\", \"Respectable\"];\nexport const sortEntries: sortEntry[] = [\"platform\", \"serial\", \"title\", \"practice\", \"remember\", \"weight\", \"difficulty\"];\nexport const sortEntryLabels = {\n  platform: \"Platform\",\n  serial: \"Serial\",\n  title: \"Problem Title\",\n  practice: \"Number of Practices\",\n  remember: \"Number of Remembered\",\n  weight: \"Memory Intensity\",\n  difficulty: \"Difficulty\"\n}\n\nconst problems = loadState();\nupdateWeightsNormCumulated(problems);\nconst selectedProblems = selectProblems(problems, 3);\n\nconst initialState: StateType = {\n  selectedProblems: selectedProblems,\n  problems: problems,\n  sortEntry: \"platform\",\n  isReverse: false,\n};\n\nconst reducer = (state: StateType, action: ActionType): StateType => {\n  switch (action.type) {\n    case \"addProblem\":\n      if (action.payload && state.problems.find(element => element.index === action.payload.index)) {\n        return state;\n      }\n      return {\n        ...state,\n        problems: [...state.problems, action.payload]\n      };\n    case \"addProblems\":\n      if (action.payload) {\n        return {\n          ...state,\n          problems: action.payload\n        };\n      }\n      return state;\n    case \"addSelectedProblems\":\n      if (action.payload) {\n        return {\n          ...state,\n          selectedProblems: action.payload\n        };\n      }\n      return state;\n    case \"deleteProblem\":\n      if (action.payload) {\n        const p = state.problems.find(element => element.index === action.payload);\n        if (p !== undefined) {\n          const index = state.problems.indexOf(p);\n          const problemsCopy = [...state.problems];\n          problemsCopy.splice(index, 1);\n          return {\n            ...state,\n            problems: problemsCopy\n          };\n        }\n      }\n      return state;\n    case \"deleteSelectedProblem\":\n      if (action.payload) {\n        const p = state.selectedProblems.find(e => e.index === action.payload);\n        if (p !== undefined) {\n          const index = state.selectedProblems.indexOf(p);\n          const problemsCopy = [...state.selectedProblems];\n          problemsCopy.splice(index, 1);\n          return {\n            ...state,\n            selectedProblems: problemsCopy\n          };\n        }\n      }\n      return state;\n    case \"updateProblem\":\n      if (action.payload) {\n        const p = state.problems.find(element => element.index === action.payload.index);\n        if (p !== undefined) {\n          const index = state.problems.indexOf(p);\n          const problemsCopy = [...state.problems];\n          problemsCopy.splice(index, 1, action.payload);\n          return {\n            ...state,\n            problems: problemsCopy\n          };\n        }\n      }\n      return state;\n    case \"updateWeightsNormCumulated\":\n      const problemsCopy = [...state.problems];\n      updateWeightsNormCumulated(problemsCopy);\n      return {\n        ...state,\n        problems: problemsCopy\n      };\n    case \"sortProblems\":\n      const sortEntry = action.payload.sortEntry;\n      const isReverse = action.payload.isReverse;\n      const alpha = isReverse ? -1 : 1;\n      if (sortEntry !== state.sortEntry || isReverse !== state.isReverse) {\n        const sortedProblems = state.problems.sort((p1, p2) => {\n          let less = p1[sortEntry] < p2[sortEntry];\n          if (sortEntry === \"serial\") {\n            less = p1[sortEntry].length < p2[sortEntry].length || (p1[sortEntry].length === p2[sortEntry].length && p1[sortEntry] < p2[sortEntry]);\n          }\n          return less ? -alpha : alpha;\n        });\n        return {\n          ...state,\n          problems: sortedProblems,\n          sortEntry: sortEntry,\n          isReverse: isReverse,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport const ProblemsContext = createContext(initialState)\n\nexport const ProblemsProvider = ({children}: { children: ReactNode }): ReactElement => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <ProblemsContext.Provider value={{...state, dispatch}}>\n      {children}\n    </ProblemsContext.Provider>\n  )\n}","import {ProblemDisplay} from \"../providers/ProblemProvider\";\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return [];\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nexport const saveState = (state: ProblemDisplay[]) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const downloadToJson = (state: ProblemDisplay[]) => {\n  const filename = \"state.json\";\n  const contentType = \"application/json;charset=utf-8;\";\n  const a = document.createElement('a');\n  a.download = filename;\n  a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(state));\n  a.target = '_blank';\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n};","import React, {createContext, Dispatch, ReactElement, ReactNode, useReducer} from 'react';\n\ntype ActionType = { type: 'toggleAddProblem', payload: boolean }\n  | { type: 'toggleSortProblems', payload: boolean };\n\ninterface StateType {\n  addProblemDialogOpen: boolean;\n  sortProblemsDialogOpen: boolean;\n  dispatch?: Dispatch<ActionType>;\n}\n\nconst initialState: StateType = {\n  addProblemDialogOpen: false,\n  sortProblemsDialogOpen: false,\n};\n\nconst reducer = (state: StateType, action: ActionType): StateType => {\n  switch (action.type) {\n    case \"toggleAddProblem\":\n      return {\n        ...state,\n        addProblemDialogOpen: action.payload\n      };\n    case \"toggleSortProblems\":\n      return {\n        ...state,\n        sortProblemsDialogOpen: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport const DialogStateContext = createContext(initialState);\n\nexport const DialogStateProvider = ({children}: { children: ReactNode }): ReactElement => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <DialogStateContext.Provider value={{...state, dispatch}}>\n      {children}\n    </DialogStateContext.Provider>\n  )\n}","import React, {ChangeEvent, useContext, useState} from \"react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\nimport SpeedDialIcon from \"@material-ui/lab/SpeedDialIcon\";\nimport SpeedDialAction from \"@material-ui/lab/SpeedDialAction\";\nimport {DialogStateContext} from \"../../providers/DialogStateProvider\";\nimport {ProblemDisplay, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {selectProblems} from \"../../utils/ebbinghaus\";\n\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport {downloadToJson} from \"../../utils/localStorage\";\nimport SortByAlphaIcon from '@material-ui/icons/SortByAlpha';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    speedDial: {\n      position: 'fixed',\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n        bottom: theme.spacing(5),\n        right: theme.spacing(5),\n      },\n      '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n        top: theme.spacing(5),\n        left: theme.spacing(5),\n      },\n    }\n  })\n);\n\nconst QuickAccessButton = () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState<boolean>(false);\n  const {dispatch} = useContext(DialogStateContext);\n  const {problems, dispatch: dispatchProblem} = useContext(ProblemsContext);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleAddProblemDialog = () => {\n    if (dispatch) {\n      dispatch({\n        type: \"toggleAddProblem\",\n        payload: true,\n      });\n    }\n  };\n\n  const handleRefreshSelectedProblems = () => {\n    if (dispatchProblem) {\n      dispatchProblem({\n        type: \"updateWeightsNormCumulated\",\n      });\n    }\n    const selected = selectProblems(problems, 3);\n    if (dispatchProblem) {\n      dispatchProblem({\n        type: \"addSelectedProblems\",\n        payload: selected\n      });\n    }\n  };\n\n  const handleSortProblemsDialog = () => {\n    if (dispatch) {\n      dispatch({\n        type: \"toggleSortProblems\",\n        payload: true,\n      });\n    }\n  };\n\n  const handleUploadFile = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const uploadProblems = JSON.parse(reader.result as string) as ProblemDisplay[];\n        if (problems.length === 0) {\n          if (dispatchProblem) {\n            dispatchProblem({\n              type: \"addProblems\",\n              payload: uploadProblems\n            })\n          }\n        } else {\n          for (let p of uploadProblems) {\n            if (!problems.find(e => e.index === p.index)) {\n              if (dispatchProblem) {\n                dispatchProblem({\n                  type: \"addProblem\",\n                  payload: p\n                });\n              }\n            }\n          }\n        }\n      };\n      reader.readAsText(event.target.files[0]);\n    }\n  }\n\n  return (\n    <div>\n      <SpeedDial\n        ariaLabel=\"Quick Access\"\n        className={classes.speedDial}\n        icon={<SpeedDialIcon/>}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={open}\n      >\n        <SpeedDialAction\n          title='Add Problem'\n          icon={<NoteAddIcon/>}\n          tooltipTitle='Add Problem'\n          onClick={() => {\n            handleClose();\n            handleAddProblemDialog();\n          }}\n        />\n        <SpeedDialAction\n          title='Refresh Selected Problems'\n          icon={<AutorenewIcon/>}\n          tooltipTitle='Refresh Selected Problems'\n          onClick={() => {\n            handleClose();\n            handleRefreshSelectedProblems();\n          }}\n        />\n        <SpeedDialAction\n          title={'Sort Problems'}\n          icon={<SortByAlphaIcon/>}\n          tooltipTitle={'Sort Problems'}\n          onClick={() => {\n            handleClose();\n            handleSortProblemsDialog();\n          }}\n        />\n        <SpeedDialAction\n          title={'Download Problems'}\n          icon={<GetAppIcon/>}\n          tooltipTitle={'Download Problems'}\n          onClick={() => downloadToJson(problems)}\n        />\n        <SpeedDialAction\n          title={'Upload Problems'}\n          icon={\n            <div>\n              <input type={'file'} id={'contained-button-file'} style={{display: 'none'}} onChange={handleUploadFile}/>\n              <label htmlFor={'contained-button-file'}>\n                <PublishIcon/>\n              </label>\n            </div>}\n          tooltipTitle={'Upload Problems'}\n          onClick={handleClose}\n        />\n      </SpeedDial>\n    </div>\n  )\n}\n\nexport default QuickAccessButton;","import React, {createContext, Dispatch, ReactElement, ReactNode, useReducer} from 'react';\nimport data from \"../data/leetcode.json\";\n\nexport interface LeetCodeChoice {\n  id: number;\n  title: string;\n  titleSlug: string;\n  difficulty: number;\n}\n\ntype ActionType = { type: 'addLeetCodeChoices', payload: LeetCodeChoice[] };\n\ninterface StateType {\n  leetCodeChoices: Array<LeetCodeChoice>;\n  dispatch?: Dispatch<ActionType>;\n}\n\nconst leetCodeChoices: LeetCodeChoice[] = data[\"stat_status_pairs\"]\n  .map(p => ({\n    id: p[\"stat\"][\"frontend_question_id\"],\n    title: p[\"stat\"][\"question__title\"],\n    titleSlug: p[\"stat\"][\"question__title_slug\"],\n    difficulty: p[\"difficulty\"][\"level\"] - 1\n  }));\n\nconst initialState: StateType = {\n  leetCodeChoices: leetCodeChoices\n};\n\nconst reducer = (state: StateType, action: ActionType): StateType => {\n  switch (action.type) {\n    case \"addLeetCodeChoices\":\n      if (action.payload) {\n        return {\n          ...state,\n          leetCodeChoices: action.payload\n        }\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport const ChoicesContext = createContext(initialState);\n\nexport const ChoicesProvider = ({children}: { children: ReactNode }): ReactElement => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <ChoicesContext.Provider value={{...state, dispatch}}>\n      {children}\n    </ChoicesContext.Provider>\n  )\n}\n\n\n\n","import React, {ChangeEvent, Dispatch, SetStateAction, useContext, useState} from 'react';\nimport {DialogStateContext} from \"../../providers/DialogStateProvider\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  IconButton,\n  InputAdornment,\n  MenuItem,\n  TextField,\n  useMediaQuery,\n  useTheme\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {DateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport {InsertInvitation} from \"@material-ui/icons\";\nimport {ProblemDisplay, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {getWeight} from \"../../utils/ebbinghaus\";\nimport {ChoicesContext, LeetCodeChoice} from \"../../providers/ChoiceProvider\";\nimport {Autocomplete} from \"@material-ui/lab\";\n\nconst AddProblemDialog = () => {\n  const {addProblemDialogOpen, dispatch} = useContext(DialogStateContext);\n  const {dispatch: problemDispatch} = useContext(ProblemsContext);\n  const {leetCodeChoices} = useContext(ChoicesContext);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [platform, setPlatform] = useState<number>(0);\n  const [serial, setSerial] = useState<string>(\"\");\n  const [title, setTitle] = useState<string>(\"\");\n  const [difficulty, setDifficulty] = useState<number>(0);\n  const [time, setTime] = useState<Date | null>(null);\n\n  const handleClose = () => {\n    if (dispatch) {\n      dispatch({\n        type: \"toggleAddProblem\",\n        payload: false,\n      });\n    }\n    setPlatform(0);\n    setSerial(\"\");\n    setTitle(\"\");\n    setDifficulty(0);\n    setTime(null);\n  };\n\n  const handleChange = <T extends any>(setter: Dispatch<SetStateAction<T>>) => {\n    return (event: ChangeEvent<{ value: unknown }>) => {\n      setter(event.target.value as T);\n    };\n  };\n\n  const handleOnChange = (choice: LeetCodeChoice) => {\n    setSerial(choice.id.toString());\n    setTitle(choice.title);\n    setDifficulty(choice.difficulty);\n  }\n\n  const handleAdd = () => {\n    const currentTime = new Date().getTime();\n    const createTime = time === null ? currentTime : time.getTime();\n\n    const problem: ProblemDisplay = {\n      platform: platform,\n      serial: serial,\n      title: title,\n      index: (serial + title).replace(\" \", \"\").toLowerCase(),\n      practice: 1,\n      remember: 1,\n      difficulty: difficulty,\n      createTime: createTime,\n      updateTime: createTime,\n      weight: getWeight(currentTime, createTime, 1, 1),\n      normCumulatedWeight: 0\n    };\n    if (problemDispatch) {\n      problemDispatch({\n        type: \"addProblem\",\n        payload: problem\n      });\n    }\n  };\n\n  return (\n\n    <Dialog\n      // fullWidth\n      fullScreen={fullScreen}\n      open={addProblemDialogOpen}\n      onClose={handleClose}\n      aria-labelledby=\"add-problem-dialog\"\n    >\n      <DialogTitle id=\"add-problem-dialog-title\">{\"Add New Problem\"}</DialogTitle>\n      <DialogContent>\n        <Grid container spacing={2} justify={\"center\"} alignItems={\"center\"}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id={\"platform\"}\n              fullWidth\n              required\n              variant={\"outlined\"}\n              label={\"Platform\"}\n              value={platform}\n              onChange={handleChange(setPlatform)}\n              select\n            >\n              <MenuItem value={0}>LeetCode</MenuItem>\n              <MenuItem value={1}>Codility</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Autocomplete\n              id=\"serial\"\n              options={leetCodeChoices}\n              getOptionLabel={option => option.id.toString()}\n              onChange={(event, newValue) => {\n                if (newValue !== null) {\n                  handleOnChange(newValue);\n                }\n              }}\n              inputValue={serial}\n              onInputChange={(event, newInputValue) => {\n                setSerial(newInputValue);\n              }}\n              fullWidth\n              renderInput={params =>\n                <TextField\n                  {...params}\n                  required\n                  variant={\"outlined\"}\n                  label={platform === 0 ? \"Serial Number\" : \"Lesson Number\"}\n                />}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Autocomplete\n              id=\"title\"\n              options={leetCodeChoices}\n              getOptionLabel={option => option.title}\n              onChange={(event, newValue) => {\n                if (newValue !== null) {\n                  handleOnChange(newValue);\n                }\n              }}\n              inputValue={title}\n              onInputChange={(event, newInputValue) => {\n                setTitle(newInputValue);\n              }}\n              fullWidth\n              renderInput={params =>\n                <TextField\n                  {...params}\n                  required\n                  variant=\"outlined\"\n                  label=\"Problem Title\"\n                />}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            {\n              platform === 0 &&\n              <TextField\n                disabled={leetCodeChoices.length !== 0}\n                id={\"difficulty\"}\n                fullWidth\n                required\n                variant={\"outlined\"}\n                label={\"Difficulty\"}\n                value={difficulty}\n                onChange={handleChange(setDifficulty)}\n                select\n              >\n                <MenuItem value={0}>Easy</MenuItem>\n                <MenuItem value={1}>Medium</MenuItem>\n                <MenuItem value={2}>Hard</MenuItem>\n              </TextField>\n            }\n            {\n              platform === 1 &&\n              <TextField\n                id={\"difficulty\"}\n                fullWidth\n                required\n                variant={\"outlined\"}\n                label={\"Difficulty\"}\n                value={difficulty}\n                onChange={handleChange(setDifficulty)}\n                select\n              >\n                <MenuItem value={4}>Painless</MenuItem>\n                <MenuItem value={5}>Respectable</MenuItem>\n              </TextField>\n            }\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DateTimePicker\n                autoOk\n                clearable\n                fullWidth\n                inputVariant=\"outlined\"\n                color=\"secondary\"\n                ampm={false}\n                allowKeyboardControl={false}\n                margin=\"normal\"\n                id=\"create time\"\n                label=\"Create Time\"\n                value={time}\n                strictCompareDates={true}\n                onChange={(date) => setTime(date)}\n                onError={console.log}\n                format=\"dd.MMM.yyyy HH:mm\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton>\n                        <InsertInvitation/>\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            if (serial && title) {\n              handleAdd();\n              handleClose();\n            }\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n\n  );\n};\n\nexport default AddProblemDialog;","import React from 'react';\nimport {CardContent, createStyles, Grid, LinearProgress, Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {difficulty, platform, ProblemDisplay} from \"../../providers/ProblemProvider\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n    content: {\n      textAlign: \"left\",\n    }\n  })\n);\n\nexport interface ProblemCardProps {\n  problem: ProblemDisplay;\n}\n\nconst ProblemCardContent = (props: ProblemCardProps) => {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n  const problem = props.problem;\n\n  return (\n    <CardContent className={classes.content}>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            {platform[problem.platform]} {bull} {problem.serial} {bull} {difficulty[problem.difficulty]}\n          </Typography>\n        </Grid>\n        <Grid item xs={12} style={{height: 100}}>\n          <Typography variant=\"h6\" component=\"h3\">\n            {problem.title}\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography className={classes.pos} color=\"textSecondary\">\n            Practiced: {problem.practice}\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography className={classes.pos} color=\"textSecondary\">\n            Remembered: {problem.remember}\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <LinearProgress variant=\"determinate\" value={(1 - problem.weight) * 100} style={{height: 10}}/>\n        </Grid>\n      </Grid>\n    </CardContent>\n  )\n};\n\nexport default ProblemCardContent;","import React, {useContext} from 'react';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport {ProblemDisplay, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {ButtonGroup, IconButton, Tooltip} from \"@material-ui/core\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckIcon from '@material-ui/icons/Check';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport ProblemCardContent, {ProblemCardProps} from \"./ProblemCardContent\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    card: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n);\n\nconst ProblemCard = (props: ProblemCardProps) => {\n  const classes = useStyles();\n  const problem = props.problem;\n\n  const {dispatch} = useContext(ProblemsContext);\n\n  const handleDelete = (index: string) => {\n    if (dispatch) {\n      dispatch({\n        type: \"deleteProblem\",\n        payload: index,\n      });\n      dispatch({\n        type: \"deleteSelectedProblem\",\n        payload: index,\n      })\n    }\n  };\n\n  const handleUpdate = (p: ProblemDisplay, button: \"remembered\" | \"fail-to-remember\" | \"reset\") => {\n    p.updateTime = new Date().getTime();\n    p.weight = 0;\n    switch (button) {\n      case \"remembered\":\n        p.practice++;\n        p.remember++;\n        break;\n      case \"fail-to-remember\":\n        p.practice++;\n        break;\n      case \"reset\":\n        p.practice = 1;\n        p.remember = 1;\n        break;\n    }\n    if (dispatch) {\n      dispatch({\n        type: \"updateProblem\",\n        payload: p,\n      });\n    }\n  };\n\n  return (\n    <Card className={classes.card}>\n      <ProblemCardContent problem={problem}/>\n      <CardActions>\n        <ButtonGroup>\n          <IconButton\n            aria-label={\"delete\"}\n            onClick={() => handleDelete(problem.index)}\n          >\n            <Tooltip title={\"delete\"}>\n              <CloseIcon color={\"secondary\"}/>\n            </Tooltip>\n          </IconButton>\n          <IconButton\n            aria-label={\"remembered\"}\n            onClick={() => handleUpdate(problem, \"remembered\")}\n          >\n            <Tooltip title={\"remembered\"}>\n              <CheckIcon style={{color: \"green\"}}/>\n            </Tooltip>\n          </IconButton>\n          <IconButton\n            aria-label={\"fail-to-remember\"}\n            onClick={() => handleUpdate(problem, \"fail-to-remember\")}\n          >\n            <Tooltip title={\"forget\"}>\n              <RadioButtonUncheckedIcon style={{color: \"orange\"}}/>\n            </Tooltip>\n          </IconButton>\n          <IconButton\n            aria-label={\"reset\"}\n            onClick={() => handleUpdate(problem, \"reset\")}\n          >\n            <Tooltip title={\"reset\"}>\n              <RotateLeftIcon style={{color: \"blue\"}}/>\n            </Tooltip>\n          </IconButton>\n        </ButtonGroup>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default ProblemCard;\n","import React, {useContext} from 'react';\nimport {createStyles, makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport {ProblemDisplay, ProblemsContext} from \"../../providers/ProblemProvider\";\nimport {ButtonGroup, IconButton} from \"@material-ui/core\";\nimport CheckIcon from '@material-ui/icons/Check';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport ProblemCardContent, {ProblemCardProps} from \"./ProblemCardContent\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    card: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n);\n\nconst SelectedProblemCard = (props: ProblemCardProps) => {\n  const classes = useStyles();\n  const problem = props.problem;\n\n  const {dispatch} = useContext(ProblemsContext);\n\n  const handleUpdate = (p: ProblemDisplay, button: \"remembered\" | \"fail-to-remember\") => {\n    p.updateTime = new Date().getTime();\n    p.weight = 0;\n    switch (button) {\n      case \"remembered\":\n        p.practice++;\n        p.remember++;\n        break;\n      case \"fail-to-remember\":\n        p.practice++;\n        break;\n    }\n    if (dispatch) {\n      dispatch({\n        type: \"updateProblem\",\n        payload: p,\n      });\n      dispatch({\n        type: \"deleteSelectedProblem\",\n        payload: p.index,\n      });\n    }\n  };\n\n  return (\n    <Card className={classes.card}>\n      <ProblemCardContent problem={problem}/>\n      <CardActions>\n        <ButtonGroup>\n          <IconButton\n            aria-label={\"remembered\"}\n            onClick={() => handleUpdate(problem, \"remembered\")}\n          >\n            <CheckIcon style={{color: \"green\"}}/>\n          </IconButton>\n          <IconButton\n            aria-label={\"fail-to-remember\"}\n            onClick={() => handleUpdate(problem, \"fail-to-remember\")}\n          >\n            <RadioButtonUncheckedIcon style={{color: \"orange\"}}/>\n          </IconButton>\n        </ButtonGroup>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default SelectedProblemCard;\n","import React, {ChangeEvent, useContext, useState} from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup, Switch\n} from \"@material-ui/core\";\nimport {DialogStateContext} from \"../../providers/DialogStateProvider\";\nimport {ProblemsContext, sortEntries, sortEntryLabels, sortEntry} from \"../../providers/ProblemProvider\";\n\nconst SortProblemsDialog = () => {\n  const {sortProblemsDialogOpen, dispatch} = useContext(DialogStateContext);\n  const {dispatch: problemDispatch} = useContext(ProblemsContext);\n\n  const [entry, setEntry] = useState<sortEntry>(\"serial\");\n  const [isReverse, setIsReverse] = useState<boolean>(false);\n\n  const handleClose = () => {\n    if (dispatch) {\n      dispatch({\n        type: \"toggleSortProblems\",\n        payload: false,\n      });\n    }\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setEntry(((event.target as HTMLInputElement).value) as sortEntry);\n  };\n\n  const handleSort = () => {\n    if (problemDispatch) {\n      problemDispatch({\n        type: \"sortProblems\",\n        payload: {\n          sortEntry: entry,\n          isReverse: isReverse,\n        },\n      });\n    }\n  };\n\n  const handleIsReverse = (event: ChangeEvent<HTMLInputElement>) => {\n    setIsReverse(event.target.checked);\n  };\n\n  return (\n    <Dialog\n      open={sortProblemsDialogOpen}\n      onClose={handleClose}\n    >\n      <DialogTitle>Sort Problems By...</DialogTitle>\n      <DialogContent>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            value={entry}\n            onChange={handleChange}\n          >\n            {sortEntries.map((value => (\n              <FormControlLabel\n                key={value}\n                value={value}\n                control={<Radio/>}\n                label={sortEntryLabels[value]}\n              />\n            )))}\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={isReverse}\n                  onChange={handleIsReverse}\n                  color=\"primary\"\n                />\n              }\n              label=\"Reverse\"\n            />\n          </RadioGroup>\n        </FormControl>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            handleClose();\n            handleSort();\n          }}\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n\n};\n\nexport default SortProblemsDialog;","import React, {useContext, useEffect} from 'react';\nimport './App.css';\nimport {ProblemsContext} from \"./providers/ProblemProvider\";\nimport {Container, Grid, Theme, Typography} from \"@material-ui/core\";\nimport QuickAccessButton from \"./components/Buttons/QuickAccessButton\";\nimport AddProblemDialog from \"./components/Dialogs/AddProblemDialog\";\nimport {saveState} from \"./utils/localStorage\";\nimport ProblemCard from \"./components/Cards/ProblemCard\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport SelectedProblemCard from \"./components/Cards/SelectedProblemCard\";\nimport SortProblemsDialog from \"./components/Dialogs/SortProblemsDialog\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  heroContent: {\n    // backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const {problems, selectedProblems} = useContext(ProblemsContext);\n\n  useEffect(() => {\n    console.log(\"save to local storage\")\n    saveState(problems);\n  }, [problems])\n\n  return (\n    <div className=\"App\">\n      {\n        selectedProblems.length !== 0 &&\n        <Container className={classes.heroContent} maxWidth=\"sm\">\n          <Typography component=\"h1\" variant=\"h2\" align=\"center\" gutterBottom>\n            Selected Problems\n          </Typography>\n        </Container>\n      }\n      {\n        selectedProblems.length !== 0 &&\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          <Grid container spacing={4}>\n            {selectedProblems.map(p => (\n              <Grid item key={p.index} xs={12} sm={6} md={4}>\n                <SelectedProblemCard problem={p}/>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      }\n      <Container className={classes.heroContent} maxWidth=\"sm\">\n        <Typography component=\"h1\" variant=\"h2\" align=\"center\" gutterBottom>\n          Problems\n        </Typography>\n      </Container>\n      <Container className={classes.cardGrid} maxWidth=\"md\">\n        <Grid container spacing={4}>\n          {problems.map(p => (\n            <Grid item key={p.index} xs={12} sm={6} md={4}>\n              <ProblemCard problem={p}/>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n      <QuickAccessButton/>\n      <AddProblemDialog/>\n      <SortProblemsDialog/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ProblemsProvider} from \"./providers/ProblemProvider\";\nimport {DialogStateProvider} from \"./providers/DialogStateProvider\";\nimport {ChoicesProvider} from \"./providers/ChoiceProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChoicesProvider>\n      <ProblemsProvider>\n        <DialogStateProvider>\n          <App/>\n        </DialogStateProvider>\n      </ProblemsProvider>\n    </ChoicesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}